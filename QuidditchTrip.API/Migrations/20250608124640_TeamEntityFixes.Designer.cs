// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using QuidditchTrip.API.Configuration.Database;

#nullable disable

namespace QuidditchTrip.API.Migrations
{
    [DbContext(typeof(QuidditchContext))]
    [Migration("20250608124640_TeamEntityFixes")]
    partial class TeamEntityFixes
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("QuidditchTrip.Models.Game", b =>
                {
                    b.Property<int>("GameKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("GameKey"));

                    b.Property<DateTime?>("GameEndDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("GameStartDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.HasKey("GameKey");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("QuidditchTrip.Models.Team", b =>
                {
                    b.Property<int>("TeamKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TeamKey"));

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("GameKey")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Score")
                        .HasColumnType("integer");

                    b.HasKey("TeamKey");

                    b.HasIndex("GameKey");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("QuidditchTrip.Models.Team", b =>
                {
                    b.HasOne("QuidditchTrip.Models.Game", "Game")
                        .WithMany("Teams")
                        .HasForeignKey("GameKey")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Game");
                });

            modelBuilder.Entity("QuidditchTrip.Models.Game", b =>
                {
                    b.Navigation("Teams");
                });
#pragma warning restore 612, 618
        }
    }
}
